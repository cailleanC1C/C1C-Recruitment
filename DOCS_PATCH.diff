diff --git a/CHANGELOG.md b/CHANGELOG.md
index 8b13789..ccc3d5d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1 +1,22 @@
+# Changelog
 
+## v0.1.0 — 2025-10-14
+
+### Added
+- CoreOps cog with commands: ping, help, health, env, digest.
+- Help embed with footer: "Bot v{BOT_VERSION} • CoreOps v1.0.0 • <Vienna or UTC time>".
+- Role-based RBAC: ADMIN_ROLE_ID (single), STAFF_ROLE_IDS (list). No user-ID gating.
+- Admin "bang" shortcuts: !health, !env, !digest, !help (Admin role only).
+- Prefix handling: supports !rec, !rec␣, rec, rec␣ and @mention.
+- Watchdog mirrored from legacy: keepalive cadence, stall, disconnect grace; connection-aware.
+- Socket heartbeat with READY/connect/disconnect tracking and snapshots.
+- Health server (/ready, /healthz) bootstrapped for Render.
+- GitHub Actions → Render flow: "latest-wins" lane wait/cancel script.
+
+### Changed
+- Prefix parsing fix to accept with/without space variants.
+- Intents: enabled members intent to support role-aware gating.
+
+### Fixed
+- Command registration conflict with discord.py default help (removed default help).
+- Help footer timezone fallback (Vienna → UTC if tzdata missing).
diff --git a/README.md b/README.md
index 3ea558b..4938308 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,22 @@
 # C1C Recruitment Bot
 
-Community bot for recruiting and welcoming flows.
+C1C Recruitment keeps guild recruiting conversations on track. It gives quick status
+checks when you need them and quietly monitors the background so staff stay in sync
+without extra chatter.
 
-> Staff/dev/ops docs live under **docs/**.
-> Use `!wc help` or `!mm help` in Discord to see available commands.
+## How to talk to the bot
+- Use `!rec <command>` in channel, for example `!rec ping` or `!rec help`.
+- Mention the bot directly: `@C1C Recruitment help`.
+
+## What to expect
+- Fast responses to `ping` so you know the connection is healthy.
+- Friendly `help` guidance so everyone sees the available commands.
+- Low chat noise. The bot handles heartbeat and health checks behind the scenes.
+
+## Privacy & safety
+- The bot never asks for DMs and does not collect secrets in chat.
+- Staff-only operations stay gated to the appropriate server roles.
+
+## Need support?
+If a command is quiet, double-check that you prefixed it with `!rec`. Still stuck?
+Reach out to a server admin—they can confirm the bot is online and your role has access.
diff --git a/docs/architecture.md b/docs/architecture.md
index 21ec6d4..7f6d86d 100644
--- a/docs/architecture.md
+++ b/docs/architecture.md
@@ -1,5 +1,25 @@
-# ARCHITECTURE
+# Architecture
 
-- One bot process with feature modules under `modules/`
-- Shared infra under `shared/`
-- Prefix-aware commands; admin gating for ops
+```
+Discord Gateway
+  ↳ Event handlers (on_ready, on_message, on_connect, on_disconnect)
+      ↳ Socket heartbeat tracker (READY / connect / disconnect timestamps, snapshots)
+      ↳ Command layer (discord.py command tree with CoreOps cog)
+          ↳ RBAC helper (parses ADMIN_ROLE_ID and STAFF_ROLE_IDS role memberships)
+
+Watchdog loop
+  ↳ Keepalive cadence probe (keepalive interval, stall detection)
+  ↳ Disconnect grace timer and reconnect handling
+  ↳ Latency measurements fed into CoreOps health output
+
+Health server (aiohttp)
+  ↳ /ready endpoint for Render routing
+  ↳ /healthz endpoint for watchdog-aware checks
+```
+
+- CoreOps commands run inside the shared discord.py bot process alongside other cogs.
+- Socket heartbeat state persists timestamps for READY events, the latest gateway
+  connect, and the latest disconnect.
+- The watchdog mirrors the legacy system: it schedules keepalive messages, measures
+  stalls, and forces reconnects when the disconnect grace expires.
+- Render restarts the container automatically whenever the bot exits.
diff --git a/docs/development.md b/docs/development.md
index a282dbb..be5ec93 100644
--- a/docs/development.md
+++ b/docs/development.md
@@ -1,10 +1,38 @@
-# DEVELOPMENT
+# Development
 
-## Local setup
-- Python 3.11+
-- Copy `.env.sample` to `.env` (do not commit secrets)
-- Use `scripts/dev_run.sh` to run locally
+## Setup
+- Install Python 3.12.
+- Create a Discord application and bot token with the required intents.
+- Export the following environment variable before running locally:
 
-## Phase 1 scope
-- Health server, heartbeat, watchdog
-- Minimal CoreOps (ping, uptime, health, whereami, help)
+```text
+DISCORD_TOKEN=<bot token>
+```
+
+- Enable the **Message Content Intent** so the bot can read command prefixes.
+- Enable the **Server Members Intent** so RBAC checks receive member roles.
+
+## Run locally
+Install dependencies and start the bot:
+
+```bash
+pip install -r requirements.txt
+python app.py
+```
+
+## Try the prefixes
+Use both styles to confirm parsing:
+
+```text
+!rec ping
+@C1C Recruitment help
+```
+
+## Project layout
+- Core cogs live in `modules/`. CoreOps is loaded via `modules.coreops`.
+- Shared helpers sit under `shared/` and are imported by the bot on startup.
+- The command tree is configured in `app.py` when the bot boots.
+
+## Linting & formatting
+The project does not enforce a specific linter yet. Follow standard Black/ruff
+conventions if you contribute new Python code.
diff --git a/docs/ops.md b/docs/ops.md
index 9cdf30a..0c52892 100644
--- a/docs/ops.md
+++ b/docs/ops.md
@@ -1,5 +1,36 @@
-# OPS
+# Operations
 
-- Two Render web services: test and prod (same repo, different env vars)
-- Health endpoints: `/ready`, `/healthz` (see contracts)
-- Watchdog exits on stall; platform restarts service
+## Environment configuration
+Set these variables in Render (or your hosting platform):
+
+- `ADMIN_ROLE_ID` — Single numeric Discord role ID with admin access.
+- `STAFF_ROLE_IDS` — Comma or space separated list of numeric staff role IDs.
+- `KEEPALIVE_INTERVAL_SEC` — Default 360 in production, 60 in non-production.
+- `WATCHDOG_STALL_SEC` — Optional; defaults based on keepalive interval when unset.
+- `WATCHDOG_DISCONNECT_GRACE_SEC` — Optional; defaults to the stall interval.
+- `BOT_VERSION` — Version string included in the help footer.
+- `LOG_LEVEL` — Standard Python logging level (INFO recommended).
+- `PORT` — Port exposed for the aiohttp health server.
+
+## Discord intents
+- Enable the Server Members intent in the Discord Developer Portal.
+- Ensure `INTENTS.members = True` in code (already configured in `app.py`).
+- Message Content intent must remain enabled so prefixes function.
+
+## Deployment workflow
+- GitHub Actions builds deploy artifacts and call `wait_render.js` to ensure
+  a latest-wins release lane. In-flight deploys are canceled when a newer run arrives.
+- Render services pull the latest image, set environment variables, and restart the bot
+  on exit.
+
+## Health and monitoring
+- The aiohttp server exposes `/ready` for routing checks and `/healthz` for watchdog
+  status.
+- Watchdog logs include keepalive intervals, stall detections, reconnect attempts, and
+  heartbeat latency snapshots. Monitor for repeated stall warnings or disconnect loops.
+
+## RBAC troubleshooting
+- Look for log entries showing resolved Admin and Staff role IDs during startup.
+- Confirm incoming member payloads list the expected role IDs before a command executes.
+- If commands silently drop, verify the member still carries an allowed role and that the
+  Members intent is delivering updates.
diff --git a/docs/ops_coreops.md b/docs/ops_coreops.md
index 6f3afa6..f081e93 100644
--- a/docs/ops_coreops.md
+++ b/docs/ops_coreops.md
@@ -1,13 +1,43 @@
-# CoreOps (Phase 1)
-
-Commands:
-- `!<prefix> ping` (public)
-- `!<prefix> uptime` (public)
-- `!<prefix> health` (admin)
-- `!<prefix> whereami` (admin)
-- `!help` (public)
-
-Rules:
-- Prefix-aware (`!wc`, `!mm`, …)
-- Admin = Manage Server or ADMIN_ROLE_IDS
-- No Google Sheets access in Phase 1
+# CoreOps Runbook
+
+CoreOps gives staff and admins a quick view into the bot's health without leaving the
+Discord channel.
+
+## Access levels
+- **Admin role (`ADMIN_ROLE_ID`)** — Full access. Can run every CoreOps command and use
+  the bang shortcuts.
+- **Staff roles (`STAFF_ROLE_IDS`)** — Access to the standard `!rec` commands only.
+
+## Commands by role
+
+| Command | Staff | Admin |
+| --- | --- | --- |
+| `!rec help` | ✅ | ✅ |
+| `!rec ping` | ✅ | ✅ |
+| `!rec digest` | ✅ | ✅ |
+| `!rec health` | ✅ | ✅ |
+| `!rec env` | ✅ | ✅ |
+| `!health`, `!env`, `!digest`, `!help`, `!ping` | ❌ | ✅ |
+
+## Admin bang shortcuts
+Admins can use the `!health`, `!env`, `!digest`, `!help`, and `!ping` aliases without
+`!rec`. The shortcuts call the same handlers, so responses match the prefixed versions.
+
+## Sample outputs
+- **Health** — Embed with gateway latency, heartbeat timestamps (READY/connect/disconnect),
+  watchdog stall timers, and Render readiness.
+- **Digest** — One-line summary: bot version, watchdog state, last heartbeat age.
+- **Help footer** — `Bot v{BOT_VERSION} • CoreOps v1.0.0 • 2025-10-14 12:00 Vienna` (falls
+  back to UTC if the Vienna timezone is unavailable).
+
+## Common issues
+1. **Prefix mismatch** — Ensure commands start with `!rec`, `rec`, or a bot mention. Admin
+   shortcuts only work for Admin role holders.
+2. **Missing roles** — Confirm the Admin or Staff role IDs are applied to the member.
+3. **Intents disabled** — Enable the Server Members intent so role data arrives.
+4. **Watchdog warnings** — Review logs for stall or disconnect alerts; Render will restart
+   the container on exit.
+
+## When to escalate
+If CoreOps is offline or watchdog reconnects loop for more than a few minutes, alert the
+platform team. Provide recent `/healthz` responses and any watchdog stall logs.
diff --git a/docs/readme.md b/docs/readme.md
index e41f4db..af218cc 100644
--- a/docs/readme.md
+++ b/docs/readme.md
@@ -1,7 +1,7 @@
-# Internal Docs
+# Documentation
 
-- [DEVELOPMENT.md](DEVELOPMENT.md)
-- [OPS.md](OPS.md)
-- [ARCHITECTURE.md](ARCHITECTURE.md)
-- [contracts/core_infra.md](contracts/core_infra.md)
-- [ops_coreops.md](ops_coreops.md)
+- [architecture.md](architecture.md) — High-level system layout and watchdog flow.
+- [development.md](development.md) — Local setup, prefixes, and project structure.
+- [ops.md](ops.md) — Environment configuration, intents, and deployment workflow.
+- [ops_coreops.md](ops_coreops.md) — CoreOps runbook for admins and staff.
+- [contracts/core_infra.md](contracts/core_infra.md) — API and health contract details.
diff --git a/modules/coreops/README.md b/modules/coreops/README.md
index 489c23c..83fc57c 100644
--- a/modules/coreops/README.md
+++ b/modules/coreops/README.md
@@ -1,2 +1,57 @@
 # CoreOps Module
-Phase 1: ping, uptime, health, whereami, help (sheet-free).
+
+CoreOps ships with the recruitment bot and provides the operational commands that
+admins and staff rely on during Phase 1.
+
+## Commands
+All commands use the recruitment prefix (`!rec`) unless you are using an admin bang
+shortcut. Examples:
+
+```text
+!rec help
+!rec health
+!rec env
+!rec digest
+!rec ping
+```
+
+- `!rec help` — Lists available CoreOps commands with the current footer.
+- `!rec health` — Shows runtime, watchdog heartbeat, and gateway connection status.
+- `!rec env` — Prints a redacted environment/config snapshot (no secrets).
+- `!rec digest` — Sends a one-line operational digest for quick checks.
+- `!rec ping` — Responds immediately so you can confirm reachability.
+
+## Role-based access control
+- **Admin** access is granted by the single Discord role ID in `ADMIN_ROLE_ID`.
+- **Staff** access is granted by the comma or space separated role IDs in
+  `STAFF_ROLE_IDS`.
+- The build does not use individual user IDs for gating.
+
+## Admin bang shortcuts
+Admins can bypass the `!rec` prefix with direct bang commands:
+
+```text
+!health
+!env
+!digest
+!help
+!ping
+```
+
+These shortcuts require the Admin role and map to the same CoreOps command handlers.
+`!ping` is available because it is included in the default `COREOPS_COMMANDS` list for
+this release.
+
+## Help footer timezone
+The help embed footer displays: `Bot v{BOT_VERSION} • CoreOps v1.0.0 • <time>`. The bot
+uses Europe/Vienna time when tzdata is available and falls back to UTC if it is not.
+
+## Troubleshooting
+Use this checklist if CoreOps feels unresponsive:
+1. Confirm the message used an accepted prefix (`!rec`, `!rec `, `rec`, `rec `, or a
+   bot mention).
+2. Verify the Admin or Staff role IDs are present on the member in Discord.
+3. Ensure the bot has the Members intent enabled so role data is delivered.
+4. Check that required environment variables (`ADMIN_ROLE_ID`, `STAFF_ROLE_IDS`,
+   watchdog intervals) are set in the deployment environment.
+5. Review logs for watchdog notices about stalls or reconnect attempts.
