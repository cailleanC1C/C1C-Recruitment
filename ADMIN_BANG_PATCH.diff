diff --git a/app.py b/app.py
index 1693461..58a05d4 100644
--- a/app.py
+++ b/app.py
@@ -23,7 +23,11 @@ from shared import socket_heartbeat as hb
 from shared import health as health_srv
 from shared import watchdog
 from shared.coreops_prefix import detect_admin_bang_command
-from shared.coreops_rbac import is_admin_member
+from shared.coreops_rbac import (
+    get_admin_role_id,
+    get_staff_role_ids,
+    is_admin_member,
+)
 
 logging.basicConfig(
     level=os.getenv("LOG_LEVEL", "INFO"),
@@ -64,6 +68,11 @@ async def on_ready():
     global _watchdog_started
     hb.note_ready()  # mark as fresh as soon as we're ready
     log.info(f"Bot ready as {bot.user} | env={get_env_name()} | prefix={BOT_PREFIX}")
+    log.info(
+        "CoreOps RBAC: admin_role_id=%s staff_role_ids=%s",
+        get_admin_role_id(),
+        sorted(get_staff_role_ids()),
+    )
     bot._c1c_started_mono = _STARTED_MONO  # expose uptime for CoreOps
 
     if not _watchdog_started:
@@ -138,9 +147,11 @@ async def on_message(message: discord.Message):
     if cmd_name:
         ctx = await bot.get_context(message)
         cmd = bot.get_command(cmd_name)
-        if cmd:
-            await cmd.callback(cmd.cog, ctx)  # invoke directly
-            return
+        if cmd is not None:
+            ctx.command = cmd
+            ctx.invoked_with = cmd_name
+            await bot.invoke(ctx)
+        return
 
     await bot.process_commands(message)
 
diff --git a/shared/coreops_prefix.py b/shared/coreops_prefix.py
index 9de3f8e..7ec38bd 100644
--- a/shared/coreops_prefix.py
+++ b/shared/coreops_prefix.py
@@ -1,23 +1,36 @@
 # shared/coreops_prefix.py
 from __future__ import annotations
 
-from copy import copy
 import re
-from typing import Callable, Collection, Optional
+from typing import Callable, Collection, Dict, Optional
+
 import discord
 
 AdminCheck = Callable[[discord.abc.User | discord.Member], bool]
 _BANG_CMD_RE = re.compile(r"^!\s*([a-zA-Z]+)(?:\s|$)")
 
+
+def _normalize_commands(commands: Collection[str]) -> Dict[str, str]:
+    lookup: Dict[str, str] = {}
+    for name in commands:
+        if not isinstance(name, str):
+            continue
+        lowered = name.lower().strip()
+        if lowered:
+            lookup[lowered] = name
+    return lookup
+
+
 def detect_admin_bang_command(
     message: discord.Message,
     *, commands: Collection[str], is_admin: AdminCheck
 ) -> Optional[str]:
-    if not commands or not callable(is_admin) or not is_admin(message.author):
+    normalized = _normalize_commands(commands)
+    if not normalized or not callable(is_admin) or not is_admin(message.author):
         return None
     raw = (message.content or "").strip()
-    m = _BANG_CMD_RE.match(raw)
-    if not m:
+    match = _BANG_CMD_RE.match(raw)
+    if not match:
         return None
-    cmd = m.group(1).lower()
-    return cmd if cmd in {c.lower() for c in commands} else None
+    cmd = match.group(1).lower()
+    return normalized.get(cmd)
diff --git a/shared/coreops_rbac.py b/shared/coreops_rbac.py
index e638889..4c1445d 100644
--- a/shared/coreops_rbac.py
+++ b/shared/coreops_rbac.py
@@ -25,8 +25,13 @@ def _parse_role_tokens(raw: str) -> Iterable[str]:
 
 
 def _safe_int(tok: str) -> Optional[int]:
+    if not tok:
+        return None
+    match = re.search(r"\d+", tok)
+    if not match:
+        return None
     try:
-        return int(tok)
+        return int(match.group(0))
     except (TypeError, ValueError):
         return None
 
