#!/usr/bin/env python3
"""Scan the repository for the deprecated command prefix token."""

from __future__ import annotations

from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
REPORT_PATH = ROOT / "AUDIT" / "CommandPrefix-Audit.md"
TARGET = "COMMAND_" "PREFIX"
SCRIPT_PATH = Path(__file__).resolve()


def _iter_files(root: Path) -> list[Path]:
    files: list[Path] = []
    for path in root.rglob("*"):
        if not path.is_file():
            continue
        if "AUDIT" in path.parts:
            continue
        if ".git" in path.parts:
            continue
        if path.suffix in {".pyc", ".pyo", ".py.class"}:
            continue
        files.append(path)
    return files


def _scan_file(path: Path) -> list[tuple[int, str]]:
    try:
        text = path.read_text(encoding="utf-8", errors="ignore")
    except Exception:
        return []
    hits: list[tuple[int, str]] = []
    for idx, line in enumerate(text.splitlines(), start=1):
        if TARGET in line:
            hits.append((idx, line.strip()))
    return hits


def _write_report(py_hits, other_hits) -> None:
    REPORT_PATH.parent.mkdir(parents=True, exist_ok=True)
    lines: list[str] = []
    lines.append("# Command Prefix Audit")
    lines.append("")
    lines.append("This report is generated by `scripts/audit_command_prefix_usage.py`.")
    lines.append(
        "It lists every occurrence of `{token}` in the repository and fails CI if any "
        "Python files contain the token.".format(token=TARGET)
    )
    lines.append("")

    lines.append("## Python references")
    lines.append("")
    if not py_hits:
        lines.append("- None ✅")
    else:
        for rel_path, idx, snippet in py_hits:
            lines.append(f"- `{rel_path}:{idx}` — `{snippet}`")
    lines.append("")

    lines.append("## Non-Python references")
    lines.append("")
    if not other_hits:
        lines.append("- None")
    else:
        for rel_path, idx, snippet in other_hits:
            lines.append(f"- `{rel_path}:{idx}` — `{snippet}`")
    lines.append("")

    REPORT_PATH.write_text("\n".join(lines), encoding="utf-8")


def main() -> int:
    py_hits: list[tuple[str, int, str]] = []
    other_hits: list[tuple[str, int, str]] = []

    for path in _iter_files(ROOT):
        if path in {REPORT_PATH, SCRIPT_PATH}:
            continue
        hits = _scan_file(path)
        if not hits:
            continue
        rel = path.relative_to(ROOT)
        if path.suffix == ".py":
            for idx, snippet in hits:
                py_hits.append((str(rel), idx, snippet))
        else:
            for idx, snippet in hits:
                other_hits.append((str(rel), idx, snippet))

    py_hits.sort()
    other_hits.sort()
    _write_report(py_hits, other_hits)
    return 1 if py_hits else 0


if __name__ == "__main__":
    raise SystemExit(main())
