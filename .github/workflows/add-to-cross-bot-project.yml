name: 11-auto-Add issues to Cross-Bot Hotlist
on:
  issues:
    types: [opened, reopened, labeled, edited, transferred]

jobs:
  add:
    runs-on: ubuntu-latest
    steps:
      - name: Set Priority field from P* label
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
          PROJECT_OWNER: cailleanC1C
          PROJECT_NUMBER: 1   # <-- just the number, e.g. 5 (no quotes)
          ISSUE_NODE_ID: ${{ github.event.issue.node_id }}
          ISSUE_LABELS_JSON: ${{ toJson(github.event.issue.labels) }}
        run: |
          set -euo pipefail

          # 1) Determine P* from labels
          PRIORITY=$(printf '%s' "$ISSUE_LABELS_JSON" | jq -r 'map(.name) | map(select(test("^P[0-4]$"))) | first // empty')
          if [ -z "$PRIORITY" ]; then
            echo "No P* label; skipping Priority update."
            exit 0
          fi
          echo "Detected priority: $PRIORITY"

          # 2) Build a query with PROJECT_NUMBER as a literal Int
          read -r -d '' QUERY <<'GRAPHQL' || true
          query($owner:String!) {
            user(login:$owner) {
              projectV2(number: __NUM__) {
                id
                fields(first:50) {
                  nodes {
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options { id name }
                    }
                  }
                }
              }
            }
          }
          GRAPHQL
          QUERY="${QUERY/__NUM__/${PROJECT_NUMBER}}"

          # 3) Fetch project + Priority field + options
          PROJ_JSON=$(gh api graphql -F owner="$PROJECT_OWNER" -f query="$QUERY")
          PROJECT_ID=$(jq -r '.data.user.projectV2.id' <<<"$PROJ_JSON")
          FIELD_ID=$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name=="Priority") | .id' <<<"$PROJ_JSON")
          OPTION_ID=$(jq -r --arg P "$PRIORITY" '.data.user.projectV2.fields.nodes[] | select(.name=="Priority") | .options[] | select(.name==$P) | .id' <<<"$PROJ_JSON")

          if [ -z "$PROJECT_ID" ] || [ -z "$FIELD_ID" ] || [ -z "$OPTION_ID" ]; then
            echo "Could not resolve project/field/option ids"; exit 1
          fi

          # 4) Ensure the item exists in the project; get item id
          ITEMS_JSON=$(gh api graphql -F id="$ISSUE_NODE_ID" -f query='
            query($id:ID!) {
              node(id:$id) {
                ... on Issue {
                  projectItems(first:50, includeArchived:false) {
                    nodes { id project { id } }
                  }
                }
              }
            }')
          ITEM_ID=$(jq -r --arg PID "$PROJECT_ID" '.data.node.projectItems.nodes[] | select(.project.id==$PID) | .id' <<<"$ITEMS_JSON")

          if [ -z "$ITEM_ID" ] || [ "$ITEM_ID" = "null" ]; then
            ADD_JSON=$(gh api graphql -F projectId="$PROJECT_ID" -F contentId="$ISSUE_NODE_ID" -f query='
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) { item { id } }
              }')
            ITEM_ID=$(jq -r '.data.addProjectV2ItemById.item.id' <<<"$ADD_JSON")
          fi

          # 5) Set the Priority value
          gh api graphql \
            -F projectId="$PROJECT_ID" \
            -F itemId="$ITEM_ID" \
            -F fieldId="$FIELD_ID" \
            -F optionId="$OPTION_ID" \
            -f query='
              mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!) {
                updateProjectV2ItemFieldValue(input:{
                  projectId:$projectId,
                  itemId:$itemId,
                  fieldId:$fieldId,
                  value:{ singleSelectOptionId:$optionId }
                }) { clientMutationId }
              }'
          echo "Priority updated to $PRIORITY."
