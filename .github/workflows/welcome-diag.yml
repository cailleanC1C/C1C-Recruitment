name: welcome-flow-diagnostics

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  welcome-diag:
    if: >-
      github.event.pull_request.title == 'Welcome Flow â€” Full Diagnostics (view timeout, persistent handler, interaction ACK, thread perms)'
    runs-on: ubuntu-latest
    env:
      WELCOME_DIAG: '1'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-asyncio aiohttp yarl
      - name: Reset diagnostics log
        run: |
          mkdir -p AUDIT
          : > AUDIT/welcome_flow_diag.jsonl
      - name: Lint (compileall)
        run: |
          python -m compileall modules
      - name: Run tests with diagnostics
        env:
          WELCOME_DIAG: '1'
        run: |
          pytest -q
      - name: Summarize diagnostics
        run: |
          python scripts/diag/welcome_flow_summarize.py --log AUDIT/welcome_flow_diag.jsonl --output welcome-diag-comment.md
      - name: Post Findings comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const marker = '<!-- welcome-flow-findings -->';
            let body = marker + '\n';
            let content = '';
            try {
              content = fs.readFileSync('welcome-diag-comment.md', 'utf8');
            } catch (error) {
              content = 'Diagnostics summary unavailable.';
            }
            body += content.trim() + '\n' + marker;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 100,
            });

            const existing = comments.find((comment) => comment.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
