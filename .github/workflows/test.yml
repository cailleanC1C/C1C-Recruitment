name: 05-tests

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-asyncio aiohttp yarl
      - name: Run tests
        id: pytest
        continue-on-error: true
        run: |
          set -o pipefail
          pytest -q 2>&1 | tee pytest.out
      - name: Build tests summary
        if: always()
        env:
          STEP_OUTCOME: ${{ steps.pytest.outcome }}
        run: |
          if [ "${STEP_OUTCOME}" = "success" ]; then
            MESSAGE="All tests passed.";
          elif [ "${STEP_OUTCOME}" = "skipped" ]; then
            MESSAGE="Test suite skipped.";
          elif [ "${STEP_OUTCOME}" = "cancelled" ]; then
            MESSAGE="Test run was cancelled.";
          else
            MESSAGE="Test failures detected. Review pytest.out for details.";
          fi
          python scripts/ci/write_summary.py \
            --title "Test Suite" \
            --status "${STEP_OUTCOME}" \
            --message "${MESSAGE}" \
            --detail "Command: `pytest -q`" \
            --detail "Log: `pytest.out`" \
            --output tests-summary.md
      - name: Post tests summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const marker = '<!-- tests-summary -->';
            let body = marker + '\n';
            try {
              body += fs.readFileSync('tests-summary.md', 'utf8').trim() + '\n';
            } catch (error) {
              body += 'Test summary unavailable.\n';
            }
            body += marker;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 100,
            });

            const existing = comments.find((comment) => comment.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fail on test failures
        if: steps.pytest.outcome == 'failure'
        run: exit 1
