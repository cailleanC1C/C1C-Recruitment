name: 97-auto-label & milestone PRs

on:
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr_admin:
    if: github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Apply labels and milestone
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const { owner, repo } = context.repo;

            // ---- Settings ----------------------------------------------------
            const MILESTONE_TITLE = "Harmonize v1.0";

            // Canonical labels from your repo (name -> {color, description})
            const CANON = {
              "comp:data-sheets": { color: "168700", description: "Google Sheets schema, reads/writes, adapters" },
              "comp:cache":       { color: "0e8a16", description: "Caching layers / TTL / cold start" },
              "config":           { color: "006b75", description: "Env vars, toggles, YAML/JSON config, secrets" },
              "data":             { color: "168700", description: "Sheets schema, caching, adapters, migrations" },
              "docs":             { color: "0b75a8", description: "README, guides, runbooks" },
              "bug":              { color: "d73a4a", description: "Broken behavior or incorrect output" },
              "bot:welcomecrew":  { color: "0052cc", description: "WelcomeCrew bot" },
              "bot:matchmaker":   { color: "0052cc", description: "Matchmaker bot" }
            };

            // ---- Collect desired labels --------------------------------------
            const want = new Set(["comp:data-sheets","comp:cache","config","data"]);

            const title = pr.title.toLowerCase();
            const headRef = pr.head.ref.toLowerCase();

            // Heuristic: bug vs docs
            if (title.startsWith("fix:") || title.includes("[fix]")) {
              want.add("bug");
            }

            // Determine changed files to detect docs-only PRs
            const files = await github.paginate(github.rest.pulls.listFiles, {
              owner, repo, pull_number: pr.number, per_page: 100
            });

            const nonDocsChanged = files.some(f => {
              const p = (f.filename || "").toLowerCase();
              const isDoc = p.startsWith("docs/") || p.endsWith(".md") || p.endsWith(".mdx") || p === "readme.md";
              return !isDoc;
            });

            if (!nonDocsChanged) {
              want.add("docs");
            }

            // Heuristic: bot labels by branch/title
            if (headRef.includes("welcome") || title.includes("welcome")) {
              want.add("bot:welcomecrew");
            }
            if (headRef.includes("matchmaker") || title.includes("matchmaker")) {
              want.add("bot:matchmaker");
            }

            // ---- Ensure labels exist (create if missing) ---------------------
            const ensureLabel = async (name) => {
              try {
                await github.rest.issues.getLabel({ owner, repo, name });
              } catch (e) {
                if (e.status === 404) {
                  const spec = CANON[name] || { color: "cccccc", description: "" };
                  await github.rest.issues.createLabel({
                    owner, repo, name, color: spec.color, description: spec.description
                  });
                } else {
                  throw e;
                }
              }
            };

            for (const name of want) {
              await ensureLabel(name);
            }

            // ---- Apply labels (merge, don't replace) -------------------------
            if (want.size > 0) {
              await github.rest.issues.addLabels({
                owner, repo, issue_number: pr.number, labels: Array.from(want)
              });
            }

            // ---- Ensure milestone exists -------------------------------------
            const getOrCreateMilestone = async (msTitle) => {
              // Try open first, then all
              let ms = await github.paginate(github.rest.issues.listMilestones, { owner, repo, state: "open", per_page: 100 });
              let found = ms.find(m => m.title === msTitle);
              if (!found) {
                ms = await github.paginate(github.rest.issues.listMilestones, { owner, repo, state: "all", per_page: 100 });
                found = ms.find(m => m.title === msTitle);
              }
              if (found) return found;
              const { data } = await github.rest.issues.createMilestone({ owner, repo, title: msTitle });
              return data;
            };

            const milestone = await getOrCreateMilestone(MILESTONE_TITLE);

            // ---- Attach milestone to PR (PRs are issues underneath) ----------
            await github.rest.issues.update({
              owner, repo, issue_number: pr.number, milestone: milestone.number
            });

            core.info(`Applied labels: ${Array.from(want).join(", ")}`);
            core.info(`Set milestone: ${MILESTONE_TITLE}`);
