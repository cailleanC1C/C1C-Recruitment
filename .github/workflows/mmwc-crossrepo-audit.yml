name: Cross-repo Audit — Matchmaker + WelcomeCrew

on:
  workflow_dispatch:
    inputs:
      date_tag:
        description: "YYYYMMDD tag for output folder"
        required: true
        default: "20251010"

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: mmwc-audit-${{ github.ref }}
  cancel-in-progress: false

jobs:
  audit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout destination repo (C1C-Recruitment)
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install JSCPD (duplicate detector)
        run: npm i -g jscpd@3.5.10

      - name: Prepare workspace & clone source repos
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p work && cd work
          git clone --depth=1 https://github.com/cailleanC1C/C1C-Achievements.git Achievements
          git clone --depth=1 https://github.com/cailleanC1C/c1c-welcomecrew.git WelcomeCrew
          ls -la

      - name: Run JSCPD across both repos
        shell: bash
        run: |
          set -euo pipefail
          jscpd --min-tokens 50 --threshold 0 \
            --reporters "markdown,json" \
            --output "work/jscpd" \
            "work/Achievements" "work/WelcomeCrew" || true

      - name: Generate FILEMAP, APISURF, scans, and vendor sources
        shell: bash
        run: |
          set -euo pipefail
          OUT="AUDIT/${{ github.event.inputs.date_tag }}_init_audit_MM_WC"
          SRC_MM="AUDIT/${{ github.event.inputs.date_tag }}_src/MM"
          SRC_WC="AUDIT/${{ github.event.inputs.date_tag }}_src/WC"
          mkdir -p "$OUT" "$SRC_MM" "$SRC_WC"

          # === Vendor full source trees (minus noise) so Codex can read them locally ===
          rsync -a --delete \
            --exclude='.git/' --exclude='__pycache__/' --exclude='.mypy_cache/' \
            --exclude='.pytest_cache/' --exclude='node_modules/' \
            --exclude='*.png' --exclude='*.jpg' --exclude='*.jpeg' --exclude='*.gif' --exclude='*.webp' --exclude='*.pdf' \
            --exclude='.venv/' --exclude='venv/' \
            work/Achievements/ "$SRC_MM/"
          rsync -a --delete \
            --exclude='.git/' --exclude='__pycache__/' --exclude='.mypy_cache/' \
            --exclude='.pytest_cache/' --exclude='node_modules/' \
            --exclude='*.png' --exclude='*.jpg' --exclude='*.jpeg' --exclude='*.gif' --exclude='*.webp' --exclude='*.pdf' \
            --exclude='.venv/' --exclude='venv/' \
            work/WelcomeCrew/ "$SRC_WC/"

          # FILEMAPs
          {
            echo "# FILEMAP — Achievements"
            (cd work/Achievements && git ls-files | sort | sed 's/^/- /')
            echo
            echo "# FILEMAP — WelcomeCrew"
            (cd work/WelcomeCrew && git ls-files | sort | sed 's/^/- /')
          } > "$OUT/FILEMAP.md"

          # Command/prefix scan (heuristic, factual)
          {
            echo "# Command & Prefix Scan"
            echo
            echo "## Achievements"
            grep -RInE "@(commands\.command|app_commands\.command)|prefix|^!|discord\.app_commands" work/Achievements || true
            echo
            echo "## WelcomeCrew"
            grep -RInE "@(commands\.command|app_commands\.command)|prefix|^!|discord\.app_commands" work/WelcomeCrew || true
          } > "$OUT/COMMAND_SCAN.md"

          # Health/self-ping scan
          {
            echo "# Health/self-ping Scan"
            echo
            grep -RInE "/health|/version|aiohttp|fastapi|keepalive|self[-_ ]?ping" work/Achievements || true
            grep -RInE "/health|/version|aiohttp|fastapi|keepalive|self[-_ ]?ping" work/WelcomeCrew || true
          } > "$OUT/HEALTH_SCAN.md"

          # API surface (Discord & Sheets/HTTP)
          {
            echo "# APISURF"
            echo
            echo "## Discord usage (heuristics)"
            grep -RInE "\bdiscord\.|app_commands|commands\." work/Achievements work/WelcomeCrew || true
            echo
            echo "## Google Sheets / HTTP"
            grep -RInE "gspread|googleapiclient|requests\.|httpx\.|urllib\.request" work/Achievements work/WelcomeCrew || true
          } > "$OUT/APISURF.md"

          # Copy prior REVIEW folders for reconciliation
          mkdir -p "$OUT/PRIOR_REVIEWS/Achievements" "$OUT/PRIOR_REVIEWS/WelcomeCrew"
          if [ -d "work/Achievements/REVIEW" ]; then
            cp -R work/Achievements/REVIEW/* "$OUT/PRIOR_REVIEWS/Achievements/" || true
          fi
          if [ -d "work/WelcomeCrew/REVIEW" ]; then
            cp -R work/WelcomeCrew/REVIEW/* "$OUT/PRIOR_REVIEWS/WelcomeCrew/" || true
          fi

          # JSCPD reports (already run in prior step)
          if [ -d "work/jscpd" ]; then
            cp work/jscpd/report.md "$OUT/DUPLICATES.md" || true
            cp work/jscpd/jscpd-report.json "$OUT/DUPLICATES.json" || true
          else
            echo "_JSCPD did not produce a report._" > "$OUT/DUPLICATES.md"
            echo "{}" > "$OUT/DUPLICATES.json"
          fi

          # Minimal AUDIT_SUMMARY scaffold (provenance)
          {
            echo "# AUDIT_SUMMARY"
            echo
            echo "- Date: ${{ github.event.inputs.date_tag }}"
            echo "- Source repos:"
            echo "  - cailleanC1C/C1C-Achievements (Matchmaker)"
            echo "  - cailleanC1C/c1c-welcomecrew (WelcomeCrew)"
            echo "- Acquisition: Cloned on GitHub Actions runner (no Codex)."
            echo "- Vendored copies available at:"
            echo "  - ${SRC_MM}/"
            echo "  - ${SRC_WC}/"
            echo
            echo "## Artifacts"
            echo "- FILEMAP.md"
            echo "- COMMAND_SCAN.md"
            echo "- HEALTH_SCAN.md"
            echo "- APISURF.md"
            echo "- DUPLICATES.md / DUPLICATES.json"
            echo "- PRIOR_REVIEWS/*"
          } > "$OUT/AUDIT_SUMMARY.md"

      - name: Create Pull Request with results
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ github.token }}
          branch: audit/mm-wc-${{ github.event.inputs.date_tag }}
          commit-message: "Audit: Matchmaker + WelcomeCrew — initial cross-repo audit (${{ github.event.inputs.date_tag }})"
          title: "Audit: Matchmaker + WelcomeCrew — Initial codebase audit (${{ github.event.inputs.date_tag }})"
          body: |
            This PR adds an automated cross-repo audit for:
            - **cailleanC1C/C1C-Achievements** (Matchmaker-related code)
            - **cailleanC1C/c1c-welcomecrew** (WelcomeCrew bot)

            Artifacts are placed under:
            `AUDIT/${{ github.event.inputs.date_tag }}_init_audit_MM_WC/`
            Vendored source copies for Codex/local review:
            `AUDIT/${{ github.event.inputs.date_tag }}_src/MM/` and `AUDIT/${{ github.event.inputs.date_tag }}_src/WC/`

            Contents:
            - **AUDIT_SUMMARY.md** — provenance & artifact index
            - **FILEMAP.md** — file inventories for both repos
            - **COMMAND_SCAN.md** — commands/prefixes scan (heuristic)
            - **HEALTH_SCAN.md** — health endpoints / keepalive scan
            - **APISURF.md** — Discord & Sheets/HTTP call surface (grep-based)
            - **DUPLICATES.md / DUPLICATES.json** — JSCPD duplicate results across both trees
            - **PRIOR_REVIEWS/** — copied prior REVIEW docs from each source repo

            Runs fully on GitHub Actions (no external Codex network).
