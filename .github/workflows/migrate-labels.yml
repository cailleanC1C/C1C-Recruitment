name: Migrate area:* → bot:* + comp:*

on:
  workflow_dispatch:
    inputs:
      bot_label:
        description: "bot:* label to apply (leave blank to auto-detect from repo name)"
        required: false
        default: ""
        type: string
      state:
        description: "Which items to migrate"
        required: false
        default: "open"
        type: choice
        options:
          - open
          - all

jobs:
  migrate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Run migration
        uses: actions/github-script@v7
        with:
          script: |
            const inputBot = (core.getInput('bot_label') || '').trim();
            const state = core.getInput('state') || 'open';
            const { owner, repo } = context.repo;

            // Auto-detect bot:* from repo name when input is empty
            function detectBotLabel(repoName) {
              const r = repoName.toLowerCase();
              if (r.includes('reminder'))    return 'bot:reminder';
              if (r.includes('welcome'))     return 'bot:welcomecrew';
              if (r.includes('match'))       return 'bot:matchmaker';
              if (r.includes('achiev') ||
                  r.includes('claim')  ||
                  r.includes('shard'))       return 'bot:achievements';
              return null;
            }

            let BOT_LABEL = inputBot || detectBotLabel(repo);
            const allowed = new Set(['bot:reminder','bot:welcomecrew','bot:matchmaker','bot:achievements']);
            if (!BOT_LABEL || !allowed.has(BOT_LABEL)) {
              core.setFailed(`Could not determine a valid bot label. Got '${BOT_LABEL ?? ''}'. Pass workflow input 'bot_label' explicitly (one of ${[...allowed].join(', ')}).`);
              return;
            }

            // Map old area labels → new labels to add (besides the bot label)
            const map = new Map([
              ['area:reminder',       ['bot:reminder']],
              ['area:welcomecrew',    ['bot:welcomecrew']],
              ['area:matchmaker',     ['bot:matchmaker']],
              ['area:achievements',   ['bot:achievements']],
              ['area:claims',         ['bot:achievements']],   // historical alias
              ['areaclaims',          ['bot:achievements']],   // historical alias
              ['area:shards',         ['comp:shards']],
              ['areashards',          ['comp:shards']],        // historical alias
              ['area:ops',            ['comp:ops-contract']],
              ['areaops',             ['comp:ops-contract']],  // historical alias
            ]);

            // Helper: safe add (no blanks)
            const addIfValid = (set, name) => {
              if (typeof name === 'string') {
                const v = name.trim();
                if (v.length > 0) set.add(v);
              }
            };

            // Fetch all issues/PRs with pagination
            const items = await github.paginate(
              github.rest.issues.listForRepo,
              { owner, repo, state, per_page: 100 }
            );

            let changed = 0, scanned = 0;

            for (const it of items) {
              scanned++;
              const current = (it.labels || []).map(l => typeof l === 'string' ? l : l.name).filter(Boolean);
              const set = new Set(current);

              // Ensure exactly one bot:* (if none present, add the chosen one)
              if (![...set].some(n => typeof n === 'string' && n.startsWith('bot:'))) {
                addIfValid(set, BOT_LABEL);
              }

              // Replace mapped area:* labels
              let didReplace = false;
              for (const [oldName, addList] of map.entries()) {
                if (set.has(oldName)) {
                  set.delete(oldName);
                  for (const n of addList) addIfValid(set, n);
                  didReplace = true;
                }
              }

              if (!didReplace) continue; // nothing to do

              await github.rest.issues.setLabels({
                owner, repo, issue_number: it.number, labels: [...set]
              });
              changed++;
            }

            core.notice(`Scanned ${scanned} items; updated ${changed}. BOT_LABEL=${BOT_LABEL}, state=${state}`);
