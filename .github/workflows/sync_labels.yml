name: Sync Labels from GitHub

on:
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch live labels via Octokit
        id: grab
        uses: actions/github-script@v7
        with:
          script: |
            const per_page = 100;
            let page = 1;
            let labels = [];
            while (true) {
              const res = await github.rest.issues.listLabelsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page,
                page
              });
              labels = labels.concat(res.data);
              if (res.data.length < per_page) break;
              page++;
            }
            // Normalize + sort (preserve color EXACTLY as API returns)
            const norm = labels.map(l => ({
              name: l.name,
              color: l.color || "",
              description: l.description || ""
            })).sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()));

            const fs = require('fs');
            fs.mkdirSync('.github/labels', { recursive: true });
            fs.writeFileSync('.github/labels/labels.json', JSON.stringify(norm, null, 2) + "\n");
            core.setOutput('count', String(norm.length));

      - name: Update CollaborationContract label table
        run: |
          python3 - << 'PY'
          import json, re
          from pathlib import Path

          labels = json.loads(Path('.github/labels/labels.json').read_text(encoding='utf-8'))

          # Build table
          rows = ["| Name | Color | Description |", "|---|---|---|"]
          for l in labels:
            name = l["name"]
            color = l["color"] or ""
            desc = l["description"] or ""
            rows.append(f"| {name} | `#{color}` | {desc} |")
          table = "\n".join(rows) + "\n"

          p = Path('docs/contracts/CollaborationContract.md')
          text = p.read_text(encoding='utf-8')

          # Find section start
          heading_pat = re.compile(r"^##\\s+Label Reference \\(Approved Set\\)\\s*$", re.M)
          m = heading_pat.search(text)
          if not m:
            raise SystemExit("Heading '## Label Reference (Approved Set)' not found.")

          start = m.end()

          # Find next same-level heading or EOF
          next_h_pat = re.compile(r"^##\\s+[^\\n]+\\n", re.M)
          next_m = next_h_pat.search(text, start)
          end = next_m.start() if next_m else len(text)

          # Preserve the warning line if present, otherwise add our standard warning
          segment = text[start:end]
          warn_line = "DO not use any other labels unless approved by caillean first"
          warn_pat = re.compile(r"^\\s*" + re.escape(warn_line) + r"\\s*$", re.M)
          if warn_pat.search(segment):
            new_segment = f"\n{warn_line}\n\n{table}"
          else:
            new_segment = f"\n{warn_line}\n\n{table}"

          new_text = text[:start] + new_segment + text[end:]
          p.write_text(new_text, encoding='utf-8')
          PY

      - name: Open PR with changes
        uses: peter-evans/create-pull-request@v6
        with:
          title: "Sync labels.json and CollaborationContract to live GitHub labels"
          commit-message: "Mirror labels to files: update labels.json and Contract table"
          branch: chore/sync-labels-to-files
          base: ${{ github.ref_name }}
          labels: docs, config, governance
          body: |
            This PR was opened by the **Sync Labels from GitHub** workflow.

            - Fetched live labels via Octokit for ${{ github.repository }}.
            - Overwrote `.github/labels/labels.json` to mirror live labels exactly.
            - Rewrote **Label Reference (Approved Set)** in the Collaboration Contract as a table.

            Counts:
            - Labels fetched: ${{ steps.grab.outputs.count }}

            ---
            **Instruction for Codex:**
            At the end of the PR **body**, after all sections, append the following metadata block exactly as shown.  
            Do **not** put it in the title or commit message.  
            Do **not** add any text after it.  
            This block must be the **final lines** of the PR body so the workflow can parse labels and milestone correctly.
            [meta]
            labels: docs, config, governance
            milestone: Harmonize v1.0
            [/meta]
