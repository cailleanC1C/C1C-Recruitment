name: old-audit-coreops

on:
  workflow_dispatch:
  pull_request:
    branches:
      - '**'

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      - name: Run CoreOps packaging audit
        id: packaging_audit
        continue-on-error: true
        run: |
          set -o pipefail
          python scripts/audit_coreops_packaging.py 2>&1 | tee packaging_audit.out
      - name: Run Command Prefix audit
        id: command_prefix_audit
        continue-on-error: true
        run: |
          set -o pipefail
          python scripts/audit_command_prefix_usage.py 2>&1 | tee command_prefix_audit.out
      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coreops-packaging-audit
          path: AUDIT/CoreOps-Packaging-Audit.md
      - name: Upload command prefix audit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coreops-command-prefix-audit
          path: AUDIT/CommandPrefix-Audit.md
      - name: Build audit summary
        if: always()
        env:
          PACKAGING_STATUS: ${{ steps.packaging_audit.outcome }}
          COMMAND_STATUS: ${{ steps.command_prefix_audit.outcome }}
        run: |
          OVERALL="success"
          if [ "${PACKAGING_STATUS}" != "success" ] || [ "${COMMAND_STATUS}" != "success" ]; then
            OVERALL="failure"
          fi
          if [ "${OVERALL}" = "success" ]; then
            MESSAGE="Packaging and command prefix audits passed."
          else
            MESSAGE="One or more audits failed. Review packaging_audit.out and command_prefix_audit.out."
          fi
          python scripts/ci/write_summary.py \
            --title "CoreOps Audits" \
            --status "${OVERALL}" \
            --message "${MESSAGE}" \
            --details-heading "Artifacts" \
            --detail "Packaging audit log: `packaging_audit.out` (artifact: coreops-packaging-audit)" \
            --detail "Command prefix audit log: `command_prefix_audit.out` (artifact: coreops-command-prefix-audit)" \
            --output coreops-audit-summary.md
      - name: Post CoreOps audit summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const marker = '<!-- coreops-audit-summary -->';
            let body = marker + '\n';
            try {
              body += fs.readFileSync('coreops-audit-summary.md', 'utf8').trim() + '\n';
            } catch (error) {
              body += 'CoreOps audit summary unavailable.\n';
            }
            body += marker;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 100,
            });

            const existing = comments.find((comment) => comment.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fail on CoreOps audit issues
        if: steps.packaging_audit.outcome == 'failure' || steps.command_prefix_audit.outcome == 'failure'
        run: exit 1

  coreops-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - bot_tag: "rec"
            tagged: "1"
            generic: "0"
          - bot_tag: "ach"
            tagged: "1"
            generic: "0"
          - bot_tag: ""
            tagged: "0"
            generic: "0"
    env:
      COREOPS_ADMIN_BANG_ALLOWLIST: "env,reload,health,digest,checksheet,config,help,ping,refresh all"
      BOT_TAG: ${{ matrix.config.bot_tag }}
      COREOPS_ENABLE_TAGGED_ALIASES: ${{ matrix.config.tagged }}
      COREOPS_ENABLE_GENERIC_ALIASES: ${{ matrix.config.generic }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      - name: Install dependencies
        run: python -m pip install -r requirements.txt
      - name: Run CoreOps tests
        id: pytest
        continue-on-error: true
        run: |
          set -o pipefail
          pytest packages/c1c-coreops/tests -q 2>&1 | tee coreops_tests.out
      - name: Build matrix summary
        if: always()
        env:
          STEP_OUTCOME: ${{ steps.pytest.outcome }}
          BOT_TAG: ${{ matrix.config.bot_tag }}
          TAGGED: ${{ matrix.config.tagged }}
          GENERIC: ${{ matrix.config.generic }}
        run: |
          if [ "${STEP_OUTCOME}" = "success" ]; then
            MESSAGE="Matrix run passed.";
          elif [ "${STEP_OUTCOME}" = "skipped" ]; then
            MESSAGE="Matrix run skipped.";
          elif [ "${STEP_OUTCOME}" = "cancelled" ]; then
            MESSAGE="Matrix run cancelled.";
          else
            MESSAGE="Matrix run failed. See coreops_tests.out for details.";
          fi
          python scripts/ci/write_summary.py \
            --title "CoreOps Matrix (${BOT_TAG:-none})" \
            --status "${STEP_OUTCOME}" \
            --message "${MESSAGE}" \
            --detail "Command: `pytest packages/c1c-coreops/tests -q`" \
            --detail "Log: `coreops_tests.out`" \
            --detail "Tagged aliases enabled: ${TAGGED}" \
            --detail "Generic aliases enabled: ${GENERIC}" \
            --output "coreops-matrix-${BOT_TAG:-none}-summary.md"
      - name: Post matrix summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          BOT_TAG: ${{ matrix.config.bot_tag }}
        with:
          script: |
            const fs = require('fs');
            const suffix = process.env.BOT_TAG && process.env.BOT_TAG.trim() ? process.env.BOT_TAG.trim() : 'none';
            const marker = `<!-- coreops-matrix-${suffix}-summary -->`;
            const fileName = `coreops-matrix-${suffix}-summary.md`;
            let body = marker + '\n';
            try {
              body += fs.readFileSync(fileName, 'utf8').trim() + '\n';
            } catch (error) {
              body += 'CoreOps matrix summary unavailable.\n';
            }
            body += marker;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 100,
            });

            const existing = comments.find((comment) => comment.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fail on matrix test failures
        if: steps.pytest.outcome == 'failure'
        run: exit 1
