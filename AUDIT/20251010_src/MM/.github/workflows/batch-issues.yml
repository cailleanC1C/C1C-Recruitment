name: Batch create issues

on:
  workflow_dispatch:
    inputs:
      file:
        description: "Path to issues JSON or YAML inside this repo"
        required: true
        default: ".github/issue-batches/shards-planning.json"

jobs:
  create:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Ensure jq & yq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq yq

      - name: Validate input file exists
        id: pick
        run: |
          FILE="${{ github.event.inputs.file }}"
          if [ ! -f "$FILE" ]; then
            echo "File not found: $FILE" >&2
            exit 1
          fi
          echo "file=$FILE" >> "$GITHUB_OUTPUT"

      - name: Normalize issues file to JSON
        run: |
          FILE="${{ steps.pick.outputs.file }}"
          case "$FILE" in
            *.yml|*.yaml) yq -o=json "$FILE" > issues.json ;;
            *.json) cp "$FILE" issues.json ;;
            *) echo "Unsupported file type: $FILE" >&2; exit 1 ;;
          esac
          echo "Normalized count:"
          jq 'length' issues.json

      - name: Create labels and issues (GitHub API)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const repo = { owner: context.repo.owner, repo: context.repo.repo };
            const raw = fs.readFileSync('issues.json','utf8');

            // Accept either a flat array OR { milestone, defaults, issues:[...] }
            let payload;
            try { payload = JSON.parse(raw); }
            catch (e) { core.setFailed("issues.json is not valid JSON: " + e.message); return; }

            let items = [];
            let milestoneTitle = null;
            let defaultLabels = [];
            let defaultAssignees = [];

            if (Array.isArray(payload)) {
              items = payload;
            } else if (payload && typeof payload === 'object' && Array.isArray(payload.issues)) {
              milestoneTitle   = payload.milestone || null;
              defaultLabels    = Array.isArray(payload.defaults?.labels) ? payload.defaults.labels : [];
              defaultAssignees = Array.isArray(payload.defaults?.assignees) ? payload.defaults.assignees : [];
              items = payload.issues.map(it => {
                const labels = [...new Set([...(it.labels || []), ...defaultLabels])];
                let body = it.body || "";
                if (Array.isArray(it.acceptance_criteria) && it.acceptance_criteria.length) {
                  body += "\n\nAcceptance\n- " + it.acceptance_criteria.join("\n- ");
                }
                const assignees = Array.isArray(it.assignees) ? it.assignees : defaultAssignees;
                return { title: it.title, body, labels, assignees };
              });
            } else {
              core.setFailed("Issues file must be an array or { milestone, defaults, issues:[...] }.");
              return;
            }

            core.info(`Found ${items.length} issues in batch`);

            // Ensure labels exist (standard + any custom from the batch)
            const std = [
              "severity:critical","severity:high","severity:medium","severity:low",
              "area:scheduler","area:infra","area:reminders","area:data","area:commands","area:ops","area:devx",
              "type:bug","type:perf","type:hardening","type:security","type:tooling"
            ];
            const custom = [...new Set(items.flatMap(i => Array.isArray(i.labels) ? i.labels : []))]
              .filter(x => !std.includes(x));
            const allLabels = [...new Set([...std, ...custom])];

            for (const name of allLabels) {
              try {
                await github.rest.issues.createLabel({ ...repo, name, color: "cccccc", description: name });
                core.info(`Created label: ${name}`);
              } catch (e) {
                if (e.status === 422) core.info(`Label exists: ${name}`);
                else core.warning(`Label "${name}" error: ${e.message}`);
              }
            }

            // Optional milestone
            let milestoneNumber = undefined;
            if (milestoneTitle) {
              const list = await github.rest.issues.listMilestones({ ...repo, state: "open" });
              const found = list.data.find(m => m.title === milestoneTitle);
              if (found) milestoneNumber = found.number;
              else {
                const created = await github.rest.issues.createMilestone({ ...repo, title: milestoneTitle });
                milestoneNumber = created.data.number;
              }
              core.info(`Using milestone: ${milestoneTitle} #${milestoneNumber}`);
            }

            // Create issues
            for (const it of items) {
              await github.rest.issues.create({
                ...repo,
                title: it.title || "(missing title)",
                body: it.body || "",
                labels: Array.isArray(it.labels) ? it.labels : [],
                assignees: Array.isArray(it.assignees) ? it.assignees : [],
                milestone: milestoneNumber
              });
              core.info(`Created: ${it.title}`);
            }
